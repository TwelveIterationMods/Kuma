plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

apply from: rootProject.file('repositories.gradle')
apply from: 'dependencies.gradle'

loom {
    def aw = project(":kuma-api:common").file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("fabric Client API")
            ideConfigGenerated(true)
            runDir("runs/client")
        }
        server {
            server()
            setConfigName("fabric Server API")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
        data {
            inherit client
            setConfigName("fabric Data API")
            ideConfigGenerated(true)
            runDir("build/datagen")

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":kuma-api:common").file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
        }
    }
}
