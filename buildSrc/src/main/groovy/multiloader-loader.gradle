plugins {
    id 'multiloader-common'
}

configurations {
    commonJava {
        canBeResolved = true
    }
    commonResources {
        canBeResolved = true
    }
    commonGeneratedResources {
        canBeResolved = true
    }
}

dependencies {
    compileOnly(project("${project.parent?.path}:common")) {
        capabilities {
            requireCapability "$group:${mod_id.replace('_', '-')}"
        }
    }
    commonJava project(path: "${project.parent?.path}:common", configuration: 'commonJava')
    commonResources project(path: "${project.parent?.path}:common", configuration: 'commonResources')
    commonGeneratedResources project(path: "${project.parent?.path}:common", configuration: 'commonGeneratedResources')
}

tasks.named('compileJava', JavaCompile) {
    dependsOn(configurations.commonJava)
    source(configurations.commonJava)
}

processResources {
    dependsOn(configurations.commonResources)
    dependsOn(configurations.commonGeneratedResources)
    from(configurations.commonResources)
    from(configurations.commonGeneratedResources)
}

tasks.named('javadoc', Javadoc).configure {
    dependsOn(configurations.commonJava)
    source(configurations.commonJava)
}

tasks.named("sourcesJar", Jar) {
    dependsOn(configurations.commonJava)
    from(configurations.commonJava)
    dependsOn(configurations.commonResources)
    from(configurations.commonResources)
    dependsOn(configurations.commonGeneratedResources)
    from(configurations.commonGeneratedResources)
}